Syntax.in - the syntactical rules of the language EBNF

PROGRAM=DECLARATION_OR_READ STATEMENTS
DECLARATION_OR_READ=DECLARATION{READ_VAR}|READ_VAR{DECLARATION}
DECLARATION="Initilise " TYPE IDENTIFIER ["=" CONSTANT] ";" {DECLARATION} 
TYPE="list" "<" SIMPLE_TYPE ">"|SIMPLE_TYPE
SIMPLE_TYPE="bool"|"int"|"char"|"int"
READ_VAR="Read" TYPE IDENTIFIER ";"{READ_VAR}

STATEMENTS=STATEMENT{STATEMENT}
STATEMENT=ASSIGN | PRINT_STMT | WHILE_STMT | FOR_STMT | IF_STMT | DO_WHILE

ASSIGN=IDENTIFIER "=" EXPRESSION ";" | IDENTIFIER "=" "{" {CONSTANT} "}" ";"

PRINT_STMT="Print" """ {SEQUENCE} """ {"+" IDENTIFIER} ";"
SEQUENCE=LETTER_OR_SYMBOL{LETTER_OR_SYMBOL}
LETTER_OF_SYMBOL="A"|...|"Z"|"a"|...|"z"|":"|"?"|"!"|"."

WHILE_STMT="While" "(" COND ")" ["{"] STATEMENTS ["}"]

FOR_STMT="For" "(" INIT_EXPR ";" COND_EXPR ";" INIT_EXPR ")" ["{"] STATEMENTS ["}"]
 
IF_STMT="If" "(" COND ")" ["{"] STATEMENTS ["}"] ["Else" "{" STATEMENTS "}"]

DO_WHILE="Do" ["{"] STATEMENTS ["}"] "While" "(" COND ")"

INIT_EXPR= IDENTIFIER "=" EXPRESSION {IDENTIFIER "=" EXPRESSION }
COND_EXPR=IDENTIFIER REL EXPRESSION
REL="<" | "<=" |">=" | ">"

COND= EXPRESSION RELATION EXPRESSION
RELATION = REL | "==" 

EXPRESSION=OP{("+","-")OP}
OP=FACTOR{("*,"/")FACTOR}
FACTOR="("EXPRESSION")"|TERM
TERM=IDENTIFIER|INTEGER
INTEGER=”0”|[SIGN]UNSIGNED_NUMBER
UNSIGNED_NUMBER=NON_ZERO{DIGIT}
NON_ZERO=”1”|..|”9”
DIGIT=”0”|NON_ZERO
SIGN=”+”|”-”
IDENTIFIER=LETTER{LETTER}
LETTER=”A”|...|”Z”|”a”|..|”z”



